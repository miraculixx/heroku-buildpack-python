#!/usr/bin/env bash

# source libraries into sub env
source $BIN_DIR/utils
source $BIN_DIR/warnings
[ ! "$FRESH_PYTHON" ] && bpwatch start pip_install
[ "$FRESH_PYTHON" ] && bpwatch start pip_install_first

# if user wants to uninstall some packages first do so
set +e
if [ -f requirements-uninstall.txt ]; then
  puts-step "Uninstalling packages mentioned in requirements-uninstall.txt"
  /app/.heroku/python/bin/pip uninstall -y -r requirements-uninstall.txt --disable-pip-version-check
  PIP_STATUS="${PIPESTATUS[0]}"
fi

# if user wants to uninstall some packages first do so
set +e
if [ -f requirements-uninstall.txt ]; then
  puts-step "Uninstalling packages mentioned in requirements-uninstall.txt"
  /app/.heroku/python/bin/pip uninstall -y -r requirements-uninstall.txt --disable-pip-version-check
  PIP_STATUS="${PIPESTATUS[0]}"
fi

# change variables in all requirements files depending on wether pypiapp is set for the particular deployment
if [[ -z $PYPIAPP ]]; then
    sed -i "s/\$APP/$APP/" requirements*
else
    sed -i "s/\$APP/$PYPIAPP/" requirements*
fi

puts-step "Installing standard packages for $APP"
/app/.heroku/python/bin/pip install --process-dependency-links -r requirements.txt --exists-action=w --src=./.heroku/src --disable-pip-version-check --no-cache-dir 2>&1 | tee $WARNINGS_LOG | cleanup | indent
PIP_STATUS="${PIPESTATUS[0]}"

# install $APP-local requirements.
function install_local() {
  # uninstall packages before installing them 
  puts-step "Uninstalling pre-installed shrebo libraries from $1"
  /app/.heroku/python/bin/pip uninstall -y -r $1 --disable-pip-version-check
  puts-step "Installing shrebo packages for $APP from $"
  /app/.heroku/python/bin/pip install --process-dependency-links -r $1 --allow-external --exists-action=w --src=./.heroku/src --disable-pip-version-check --no-cache-dir 2>&1 | tee $WARNINGS_LOG | cleanup | indent
  PIP_STATUS="${PIPESTATUS[0]}"
}

if [ -f requirements.local.$APP ]; then
  install_local requirements.local.$APP
elif [ -f requirements.local ]; then
  install_local requirements.local
fi
set -e

show-warnings

if [[ ! $PIP_STATUS -eq 0 ]]; then
    exit 1
fi

if [ -f Procfile.$APP ]; then
  puts-step "Loading procfile instances for $APP"
  cp Procfile.$APP Procfile
fi

# Smart Requirements handling
cp requirements.txt .heroku/python/requirements-declared.txt
/app/.heroku/python/bin/pip freeze --disable-pip-version-check > .heroku/python/requirements-installed.txt

[ ! "$FRESH_PYTHON" ] && bpwatch stop pip_install
[ "$FRESH_PYTHON" ] && bpwatch stop pip_install_first

echo
